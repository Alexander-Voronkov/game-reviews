// <auto-generated />
using System;
using GameReviews.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameReviews.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationWriteDbContext))]
    partial class ApplicationWriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameReviews.Domain.Entities.GameAggregate.Entities.GameEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("Id"), 1L, null, null, null, null, null);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.PermissionAggregate.Entities.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ReadUser"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ManageUser"
                        });
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.ReviewAggregate.Entities.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("AuthorId"), 1L, null, null, null, null, null);

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("GameId"), 1L, null, null, null, null, null);

                    b.Property<long>("Rating")
                        .HasMaxLength(100)
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId", "GameId")
                        .IsUnique();

                    b.ToTable("ReviewEntity", (string)null);
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.RolePermissionAggregate.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionEntityId")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionId");

                    b.HasKey("RoleId", "PermissionEntityId");

                    b.HasIndex("PermissionEntityId");

                    b.ToTable("RolePermission", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionEntityId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionEntityId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionEntityId = 1
                        });
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.RolesAggregate.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Registered"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.UserAggregate.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("UserId"), 1L, null, null, null, null, null);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokenEntity", (string)null);
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.UserAggregate.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.UserGameRelationAggregate.Entities.GameUserRelationship", b =>
                {
                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("UsersId"), 1L, null, null, null, null, null);

                    b.Property<long>("GamesId")
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("GamesId"), 1L, null, null, null, null, null);

                    b.HasKey("UsersId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameEntityUserEntity", (string)null);
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.UserRoleAggregate.Entities.UserRoleRelationshipAggregate", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("UsersId"), 1L, null, null, null, null, null);

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUserEntity", (string)null);
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.RolePermissionAggregate.Entities.RolePermission", b =>
                {
                    b.HasOne("GameReviews.Domain.Entities.PermissionAggregate.Entities.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameReviews.Domain.Entities.RolesAggregate.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.UserAggregate.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("GameReviews.Domain.Entities.UserAggregate.Entities.UserEntity", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.UserGameRelationAggregate.Entities.GameUserRelationship", b =>
                {
                    b.HasOne("GameReviews.Domain.Entities.GameAggregate.Entities.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameReviews.Domain.Entities.UserAggregate.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.UserRoleAggregate.Entities.UserRoleRelationshipAggregate", b =>
                {
                    b.HasOne("GameReviews.Domain.Entities.RolesAggregate.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameReviews.Domain.Entities.UserAggregate.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameReviews.Domain.Entities.UserAggregate.Entities.UserEntity", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
